package net.thevpc.dbclient.plugin.tool.importexport.exporter.csv;

import javax.swing.*;
import java.awt.*;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Taha BEN SALAH (taha.bensalah@gmail.com)  alias vpc
 * @creationtime 2009/08/07 19:10:16
 */
public class ExportDataCsvForm {
    private JComboBox encodingComboBox;
    private JComboBox fieldSeparatorComboBox;
    private JComboBox lineSeparatorComboBox;
    private JComboBox contentCoteComboBox;
    private JCheckBox coteAlwaysCheckBox;
    private JCheckBox exportHeadersCheckBox;
    private JCheckBox openFileWhenFinishedCheckBox;
    private JLabel sheetNameLabel;
    private JLabel fieldSeparatorLabel;
    private JLabel lineSeparatorLabel;
    private JLabel ContentCotesLabel;
    private JPanel mainPanel;
    private JTable columnsTable;
    private JLabel encodingLabel;
    private static final String SEP_R = "MacOs (\\r)";
    private static final String SEP_RN = "DOS/Windows (\\r\\n)";
    private static final String SEP_N = "Unix/Linux (\\n)";
    private static final String SEP_TAB = "TAB (\\t)";
    public final static Map<String, String> encodedStrings = new HashMap<String, String>();

    static {
        encodedStrings.put(SEP_R, "\r");
        encodedStrings.put(SEP_RN, "\r\n");
        encodedStrings.put(SEP_N, "\n");
        encodedStrings.put(SEP_TAB, "\t");
    }

    public ExportDataCsvForm() {
        ExportConfigCsv config = new ExportConfigCsv();
        config.validate();

        getContentCoteComboBox().setModel(new DefaultComboBoxModel(new Object[]{"\"", "\'", ""}));
        getContentCoteComboBox().setSelectedItem(config.getContentCotes());

        getLineSeparatorComboBox().setModel(new DefaultComboBoxModel(new Object[]{SEP_R, SEP_RN, SEP_N}));
        getLineSeparatorComboBox().setSelectedItem(null);

        getFieldSeparatorComboBox().setModel(new DefaultComboBoxModel(new Object[]{",", ";", ":", "$", "|", SEP_TAB}));
        getFieldSeparatorComboBox().setSelectedItem(config.getFieldSeparator());
        getCoteAlwaysCheckBox().setSelected(config.isCoteAlways());
        getOpenFileWhenFinishedCheckBox().setSelected(config.isOpenFile());
        getExportHeadersCheckBox().setSelected(config.isExportHeaders());

        ColumnFormatTableModelCsv colsModel = new ColumnFormatTableModelCsv();
        getColumnsTable().setModel(colsModel);
        encodingComboBox.addItem(null);
        for (String s : Charset.availableCharsets().keySet()) {
            encodingComboBox.addItem(s);
        }
        encodingComboBox.setSelectedItem(null);
    }


    public JComboBox getEncodingComboBox() {
        return encodingComboBox;
    }

    public JComboBox getFieldSeparatorComboBox() {
        return fieldSeparatorComboBox;
    }

    public JComboBox getLineSeparatorComboBox() {
        return lineSeparatorComboBox;
    }

    public JComboBox getContentCoteComboBox() {
        return contentCoteComboBox;
    }

    public JCheckBox getCoteAlwaysCheckBox() {
        return coteAlwaysCheckBox;
    }

    public JCheckBox getExportHeadersCheckBox() {
        return exportHeadersCheckBox;
    }

    public JCheckBox getOpenFileWhenFinishedCheckBox() {
        return openFileWhenFinishedCheckBox;
    }

    public JLabel getSheetNameLabel() {
        return sheetNameLabel;
    }

    public JLabel getFieldSeparatorLabel() {
        return fieldSeparatorLabel;
    }

    public JLabel getLineSeparatorLabel() {
        return lineSeparatorLabel;
    }

    public JLabel getContentCotesLabel() {
        return ContentCotesLabel;
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    public JTable getColumnsTable() {
        return columnsTable;
    }

    public JLabel getEncodingLabel() {
        return encodingLabel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        encodingLabel = new JLabel();
        encodingLabel.setText("Encoding");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(encodingLabel, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer2, gbc);
        fieldSeparatorLabel = new JLabel();
        fieldSeparatorLabel.setText("Field Separator");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(fieldSeparatorLabel, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer3, gbc);
        lineSeparatorLabel = new JLabel();
        lineSeparatorLabel.setText("Line Separator");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(lineSeparatorLabel, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer4, gbc);
        ContentCotesLabel = new JLabel();
        ContentCotesLabel.setText("Content Cotes");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(ContentCotesLabel, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer6, gbc);
        final JPanel spacer7 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer7, gbc);
        encodingComboBox = new JComboBox();
        encodingComboBox.setEditable(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(encodingComboBox, gbc);
        fieldSeparatorComboBox = new JComboBox();
        fieldSeparatorComboBox.setEditable(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(fieldSeparatorComboBox, gbc);
        lineSeparatorComboBox = new JComboBox();
        lineSeparatorComboBox.setEditable(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 5;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(lineSeparatorComboBox, gbc);
        contentCoteComboBox = new JComboBox();
        contentCoteComboBox.setEditable(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(contentCoteComboBox, gbc);
        coteAlwaysCheckBox = new JCheckBox();
        coteAlwaysCheckBox.setText("Cote always");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 7;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(coteAlwaysCheckBox, gbc);
        final JPanel spacer8 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 8;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer8, gbc);
        exportHeadersCheckBox = new JCheckBox();
        exportHeadersCheckBox.setText("Export Headers");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 9;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(exportHeadersCheckBox, gbc);
        final JPanel spacer9 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 10;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer9, gbc);
        openFileWhenFinishedCheckBox = new JCheckBox();
        openFileWhenFinishedCheckBox.setText("Open File when finished");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 11;
        gbc.gridwidth = 3;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(openFileWhenFinishedCheckBox, gbc);
        final JPanel spacer10 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer10, gbc);
        final JPanel spacer11 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer11, gbc);
        final JPanel spacer12 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer12, gbc);
        final JPanel spacer13 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer13, gbc);
        final JPanel spacer14 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer14, gbc);
        final JPanel spacer15 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 11;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer15, gbc);
        final JPanel spacer16 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer16, gbc);
        final JPanel spacer17 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer17, gbc);
        final JPanel spacer18 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer18, gbc);
        final JPanel spacer19 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 7;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer19, gbc);
        final JPanel spacer20 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 5;
        gbc.gridy = 9;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer20, gbc);
        final JPanel spacer21 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 12;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer21, gbc);
        final JPanel spacer22 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer22, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setPreferredSize(new Dimension(454, 200));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 13;
        gbc.gridwidth = 4;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(scrollPane1, gbc);
        columnsTable = new JTable();
        scrollPane1.setViewportView(columnsTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
